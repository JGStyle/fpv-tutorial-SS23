type tree = Node of tree * tree | Empty

let rec nodes t = match t with Empty -> 0
    | Node (l,r) -> 1 + (nodes l) + (nodes r)

let rec count t =
  let rec aux t a = match t with Empty -> a
      | Node (l,r) -> aux r (aux l (a+1))
  in
  aux t 0

################################################

To prove:
            nodes t = count t

Adaptation:
            nodes t = aux t 0

Generalization:
            acc + nodes t = aux t acc



Proof of the generalization (by induction on t):

Base: t = Empty

            acc + nodes Empty
(nodes)     = acc + match Empty with Empty -> 0 | Node (l,r) -> 1 + (nodes l) + (nodes r)
(match)     = acc + 0
(arith)     = acc
(match)     = acc
(aux)       = match Empty with Empty -> acc | Node (l,r) -> aux r (aux l (acc+1))
            = aux Empty acc



Hypothesis: 
            acc + nodes t = aux t acc

Step:

            acc + nodes (Node (a,b))
(nodes)     = acc + match Node (a,b) with Empty -> 0 | Node (l,r) -> 1 + (nodes l) + (nodes r)
(match)     = (acc + 1) + (nodes a) + (nodes b)
(I.H)       = acc + 1 + nodes a + nodes b
(I.H)       = aux b (acc+1 + nodes a)
(match)     = aux b (aux a (acc+1))
(aux)       = match Node (a,b) with Empty -> acc | Node (l,r) -> aux r (aux l (acc+1))
            = aux (Node (a,b)) acc



(*)
=> acc + nodes t = aux t acc


Trace Back:

            nodes t
(arith)     = 0 + nodes t
(*)         = aux t 0

(count)     = aux t 0
            = count t
